// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace CRM.Application.Common.Templates.Emails
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\dev\steffbeckers\event-sourcing\CRM\src\Application\Common\Templates\Emails\NewAccountCreatedEmailTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class NewAccountCreatedEmailTemplate : NewAccountCreatedEmailTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("<!DOCTYPE html>\r\n<html>\r\n  <head>\r\n    <meta name=\"viewport\" content=\"width=devic" +
                    "e-width\" />\r\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF" +
                    "-8\" />\r\n    <title>ES CRM - New account created!</title>\r\n    <style>\r\n      @me" +
                    "dia only screen and (max-width: 620px) {\r\n        table[class=\"body\"] h1 {\r\n    " +
                    "      font-size: 28px !important;\r\n          margin-bottom: 10px !important;\r\n  " +
                    "      }\r\n\r\n        table[class=\"body\"] p,\r\n        table[class=\"body\"] ul,\r\n    " +
                    "    table[class=\"body\"] ol,\r\n        table[class=\"body\"] td,\r\n        table[clas" +
                    "s=\"body\"] span,\r\n        table[class=\"body\"] a {\r\n          font-size: 16px !imp" +
                    "ortant;\r\n        }\r\n\r\n        table[class=\"body\"] .wrapper,\r\n        table[class" +
                    "=\"body\"] .article {\r\n          padding: 10px !important;\r\n        }\r\n\r\n        t" +
                    "able[class=\"body\"] .content {\r\n          padding: 0 !important;\r\n        }\r\n\r\n  " +
                    "      table[class=\"body\"] .container {\r\n          padding: 0 !important;\r\n      " +
                    "    width: 100% !important;\r\n        }\r\n\r\n        table[class=\"body\"] .main {\r\n " +
                    "         border-left-width: 0 !important;\r\n          border-radius: 0 !important" +
                    ";\r\n          border-right-width: 0 !important;\r\n        }\r\n\r\n        table[class" +
                    "=\"body\"] .btn table {\r\n          width: 100% !important;\r\n        }\r\n\r\n        t" +
                    "able[class=\"body\"] .btn a {\r\n          width: 100% !important;\r\n        }\r\n\r\n   " +
                    "     table[class=\"body\"] .img-responsive {\r\n          height: auto !important;\r\n" +
                    "          max-width: 100% !important;\r\n          width: auto !important;\r\n      " +
                    "  }\r\n      }\r\n      @media all {\r\n        .ExternalClass {\r\n          width: 100" +
                    "%;\r\n        }\r\n\r\n        .ExternalClass,\r\n        .ExternalClass p,\r\n        .Ex" +
                    "ternalClass span,\r\n        .ExternalClass font,\r\n        .ExternalClass td,\r\n   " +
                    "     .ExternalClass div {\r\n          line-height: 100%;\r\n        }\r\n\r\n        .a" +
                    "pple-link a {\r\n          color: inherit !important;\r\n          font-family: inhe" +
                    "rit !important;\r\n          font-size: inherit !important;\r\n          font-weight" +
                    ": inherit !important;\r\n          line-height: inherit !important;\r\n          tex" +
                    "t-decoration: none !important;\r\n        }\r\n\r\n        #MessageViewBody a {\r\n     " +
                    "     color: inherit;\r\n          text-decoration: none;\r\n          font-size: inh" +
                    "erit;\r\n          font-family: inherit;\r\n          font-weight: inherit;\r\n       " +
                    "   line-height: inherit;\r\n        }\r\n\r\n        .btn-primary table td:hover {\r\n  " +
                    "        background-color: #34495e !important;\r\n        }\r\n\r\n        .btn-primary" +
                    " a:hover {\r\n          background-color: #34495e !important;\r\n          border-co" +
                    "lor: #34495e !important;\r\n        }\r\n      }\r\n    </style>\r\n  </head>\r\n  <body\r\n" +
                    "    class=\"\"\r\n    style=\"\r\n      background-color: #f6f6f6;\r\n      font-family: " +
                    "sans-serif;\r\n      -webkit-font-smoothing: antialiased;\r\n      font-size: 14px;\r" +
                    "\n      line-height: 1.4;\r\n      margin: 0;\r\n      padding: 0;\r\n      -ms-text-si" +
                    "ze-adjust: 100%;\r\n      -webkit-text-size-adjust: 100%;\r\n    \"\r\n  >\r\n    <span\r\n" +
                    "      class=\"preheader\"\r\n      style=\"\r\n        color: transparent;\r\n        dis" +
                    "play: none;\r\n        height: 0;\r\n        max-height: 0;\r\n        max-width: 0;\r\n" +
                    "        opacity: 0;\r\n        overflow: hidden;\r\n        mso-hide: all;\r\n        " +
                    "visibility: hidden;\r\n        width: 0;\r\n      \"\r\n      >This is preheader text. " +
                    "Some clients will show this text as a preview.</span\r\n    >\r\n    <table\r\n      r" +
                    "ole=\"presentation\"\r\n      border=\"0\"\r\n      cellpadding=\"0\"\r\n      cellspacing=\"" +
                    "0\"\r\n      class=\"body\"\r\n      style=\"\r\n        border-collapse: separate;\r\n     " +
                    "   mso-table-lspace: 0pt;\r\n        mso-table-rspace: 0pt;\r\n        background-co" +
                    "lor: #f6f6f6;\r\n        width: 100%;\r\n      \"\r\n      width=\"100%\"\r\n      bgcolor=" +
                    "\"#f6f6f6\"\r\n    >\r\n      <tr>\r\n        <td style=\"font-family: sans-serif; font-s" +
                    "ize: 14px; vertical-align: top;\" valign=\"top\">&nbsp;</td>\r\n        <td\r\n        " +
                    "  class=\"container\"\r\n          style=\"\r\n            font-family: sans-serif;\r\n  " +
                    "          font-size: 14px;\r\n            vertical-align: top;\r\n            displa" +
                    "y: block;\r\n            max-width: 580px;\r\n            padding: 10px;\r\n          " +
                    "  width: 580px;\r\n            margin: 0 auto;\r\n          \"\r\n          width=\"580\"" +
                    "\r\n          valign=\"top\"\r\n        >\r\n          <div\r\n            class=\"content\"" +
                    "\r\n            style=\"box-sizing: border-box; display: block; margin: 0 auto; max" +
                    "-width: 580px; padding: 10px;\"\r\n          >\r\n            <!-- START CENTERED WHI" +
                    "TE CONTAINER -->\r\n            <table\r\n              role=\"presentation\"\r\n       " +
                    "       class=\"main\"\r\n              style=\"\r\n                border-collapse: sep" +
                    "arate;\r\n                mso-table-lspace: 0pt;\r\n                mso-table-rspace" +
                    ": 0pt;\r\n                background: #ffffff;\r\n                border-radius: 3px" +
                    ";\r\n                width: 100%;\r\n              \"\r\n              width=\"100%\"\r\n  " +
                    "          >\r\n              <!-- START MAIN CONTENT AREA -->\r\n              <tr>\r" +
                    "\n                <td\r\n                  class=\"wrapper\"\r\n                  style" +
                    "=\"\r\n                    font-family: sans-serif;\r\n                    font-size:" +
                    " 14px;\r\n                    vertical-align: top;\r\n                    box-sizing" +
                    ": border-box;\r\n                    padding: 20px;\r\n                  \"\r\n        " +
                    "          valign=\"top\"\r\n                >\r\n                  <table\r\n           " +
                    "         role=\"presentation\"\r\n                    border=\"0\"\r\n                  " +
                    "  cellpadding=\"0\"\r\n                    cellspacing=\"0\"\r\n                    styl" +
                    "e=\"border-collapse: separate; mso-table-lspace: 0pt; mso-table-rspace: 0pt; widt" +
                    "h: 100%;\"\r\n                    width=\"100%\"\r\n                  >\r\n              " +
                    "      <tr>\r\n                      <td style=\"font-family: sans-serif; font-size:" +
                    " 14px; vertical-align: top;\" valign=\"top\">\r\n                        <h1\r\n       " +
                    "                   style=\"\r\n                            color: #000000;\r\n       " +
                    "                     font-family: sans-serif;\r\n                            line-" +
                    "height: 1.4;\r\n                            margin: 0;\r\n                          " +
                    "  margin-bottom: 30px;\r\n                            font-size: 35px;\r\n          " +
                    "                  font-weight: 300;\r\n                            text-align: cen" +
                    "ter;\r\n                            text-transform: capitalize;\r\n                 " +
                    "         \"\r\n                        >\r\n                          ES CRM\r\n       " +
                    "                 </h1>\r\n                        <h2\r\n                          s" +
                    "tyle=\"\r\n                            color: #000000;\r\n                           " +
                    " font-family: sans-serif;\r\n                            font-weight: 400;\r\n      " +
                    "                      line-height: 1.4;\r\n                            margin: 0;\r" +
                    "\n                            margin-bottom: 30px;\r\n                          \"\r\n" +
                    "                        >\r\n                          New account created!\r\n     " +
                    "                   </h2>\r\n                        <p\r\n                          " +
                    "style=\"\r\n                            font-family: sans-serif;\r\n                 " +
                    "           font-size: 14px;\r\n                            font-weight: normal;\r\n " +
                    "                           margin: 0;\r\n                            margin-bottom" +
                    ": 15px;\r\n                          \"\r\n                        >\r\n               " +
                    "           <strong>ID</strong>: ");
            
            #line 245 "C:\dev\steffbeckers\event-sourcing\CRM\src\Application\Common\Templates\Emails\NewAccountCreatedEmailTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(AccountCreatedEvent.AggregateId));
            
            #line default
            #line hidden
            this.Write(@"
                        </p>
                        <p
                          style=""
                            font-family: sans-serif;
                            font-size: 14px;
                            font-weight: normal;
                            margin: 0;
                            margin-bottom: 15px;
                          ""
                        >
                          <strong>Name</strong>: ");
            
            #line 256 "C:\dev\steffbeckers\event-sourcing\CRM\src\Application\Common\Templates\Emails\NewAccountCreatedEmailTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(AccountCreatedEvent.Name));
            
            #line default
            #line hidden
            this.Write("\r\n                        </p>\r\n");
            
            #line 258 "C:\dev\steffbeckers\event-sourcing\CRM\src\Application\Common\Templates\Emails\NewAccountCreatedEmailTemplate.tt"
 if (!string.IsNullOrEmpty(AccountCreatedEvent.Website)) { 
            
            #line default
            #line hidden
            this.Write(@"                        <p
                          style=""
                            font-family: sans-serif;
                            font-size: 14px;
                            font-weight: normal;
                            margin: 0;
                            margin-bottom: 15px;
                          ""
                        >
                          <strong>Website</strong>: ");
            
            #line 268 "C:\dev\steffbeckers\event-sourcing\CRM\src\Application\Common\Templates\Emails\NewAccountCreatedEmailTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(AccountCreatedEvent.Website));
            
            #line default
            #line hidden
            this.Write("\r\n                        </p>\r\n");
            
            #line 270 "C:\dev\steffbeckers\event-sourcing\CRM\src\Application\Common\Templates\Emails\NewAccountCreatedEmailTemplate.tt"
 } 
            
            #line default
            #line hidden
            
            #line 271 "C:\dev\steffbeckers\event-sourcing\CRM\src\Application\Common\Templates\Emails\NewAccountCreatedEmailTemplate.tt"
 if (!string.IsNullOrEmpty(AccountCreatedEvent.Email)) { 
            
            #line default
            #line hidden
            this.Write(@"                        <p
                          style=""
                            font-family: sans-serif;
                            font-size: 14px;
                            font-weight: normal;
                            margin: 0;
                            margin-bottom: 15px;
                          ""
                        >
                          <strong>Email</strong>: ");
            
            #line 281 "C:\dev\steffbeckers\event-sourcing\CRM\src\Application\Common\Templates\Emails\NewAccountCreatedEmailTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(AccountCreatedEvent.Email));
            
            #line default
            #line hidden
            this.Write("\r\n                        </p>\r\n");
            
            #line 283 "C:\dev\steffbeckers\event-sourcing\CRM\src\Application\Common\Templates\Emails\NewAccountCreatedEmailTemplate.tt"
 } 
            
            #line default
            #line hidden
            
            #line 284 "C:\dev\steffbeckers\event-sourcing\CRM\src\Application\Common\Templates\Emails\NewAccountCreatedEmailTemplate.tt"
 if (!string.IsNullOrEmpty(AccountCreatedEvent.PhoneNumber)) { 
            
            #line default
            #line hidden
            this.Write(@"                        <p
                          style=""
                            font-family: sans-serif;
                            font-size: 14px;
                            font-weight: normal;
                            margin: 0;
                            margin-bottom: 15px;
                          ""
                        >
                          <strong>Phone number</strong>: ");
            
            #line 294 "C:\dev\steffbeckers\event-sourcing\CRM\src\Application\Common\Templates\Emails\NewAccountCreatedEmailTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(AccountCreatedEvent.PhoneNumber));
            
            #line default
            #line hidden
            this.Write("\r\n                        </p>\r\n");
            
            #line 296 "C:\dev\steffbeckers\event-sourcing\CRM\src\Application\Common\Templates\Emails\NewAccountCreatedEmailTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write(@"                      </td>
                    </tr>
                  </table>
                </td>
              </tr>
              <!-- END MAIN CONTENT AREA -->
            </table>
            <!-- END CENTERED WHITE CONTAINER -->
          </div>
        </td>
        <td style=""font-family: sans-serif; font-size: 14px; vertical-align: top;"" valign=""top"">&nbsp;</td>
      </tr>
    </table>
  </body>
</html>");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class NewAccountCreatedEmailTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
